(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
  else if (typeof exports === 'object') exports['recaptchaPromise'] = factory();
  else root['recaptchaPromise'] = factory();
})(this, function() {
  return /******/ (function(modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {}; // The require function
    /******/
    /******/ /******/ function __webpack_require__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) {
        /******/ return installedModules[moduleId].exports;
        /******/
      } // Create a new module (and put it into the cache)
      /******/ /******/ var module = (installedModules[moduleId] = {
        /******/ i: moduleId,
        /******/ l: false,
        /******/ exports: {}
        /******/
      }); // Execute the module function
      /******/
      /******/ /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      ); // Flag the module as loaded
      /******/
      /******/ /******/ module.l = true; // Return the exports of the module
      /******/
      /******/ /******/ return module.exports;
      /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/ __webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/ __webpack_require__.c = installedModules; // identity function for calling harmony imports with the correct context
    /******/
    /******/ /******/ __webpack_require__.i = function(value) {
      return value;
    }; // define getter function for harmony exports
    /******/
    /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
      /******/ if (!__webpack_require__.o(exports, name)) {
        /******/ Object.defineProperty(exports, name, {
          /******/ configurable: false,
          /******/ enumerable: true,
          /******/ get: getter
          /******/
        });
        /******/
      }
      /******/
    }; // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/ /******/ __webpack_require__.n = function(module) {
      /******/ var getter = module && module.__esModule
        ? /******/ function getDefault() {
            return module['default'];
          }
        : /******/ function getModuleExports() {
            return module;
          };
      /******/ __webpack_require__.d(getter, 'a', getter);
      /******/ return getter;
      /******/
    }; // Object.prototype.hasOwnProperty.call
    /******/
    /******/ /******/ __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    }; // __webpack_public_path__
    /******/
    /******/ /******/ __webpack_require__.p = ''; // Load entry module and return exports
    /******/
    /******/ /******/ return __webpack_require__((__webpack_require__.s = 2));
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        var RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';

        function stringifyPrimitive(v) {
          if (typeof v === 'string') return v;
          if (typeof v === 'number' && isFinite(v)) return '' + v;
          if (typeof v === 'boolean') return v ? 'true' : 'false';
          return '';
        }

        function stringify(obj) {
          var sep = '&';
          var eq = '=';

          if (obj !== null && typeof obj === 'object') {
            var keys = Object.keys(obj);
            var len = keys.length;
            var flast = len - 1;
            var fields = '';
            for (var i = 0; i < len; ++i) {
              var k = keys[i];
              var v = obj[k];
              var ks = window.encodeURIComponent(stringifyPrimitive(k)) + eq;

              fields += ks + window.encodeURIComponent(stringifyPrimitive(v));
              if (i < flast) fields += sep;
            }
            return fields;
          }
          return '';
        }

        function load(parameters) {
          var ONLOAD_CALLBACK_NAME = '__recaptchaOnload';
          var defaultParamenters = {
            onload: ONLOAD_CALLBACK_NAME,
            render: 'explicit'
          };
          var callback;

          if (parameters) {
            if (parameters.onload) {
              console.warn(
                'recaptcha-promise does not support setting an onload callback, please use the Promise API'
              );
            }

            parameters = Object.assign({}, defaultParamenters, parameters);
          } else {
            parameters = defaultParamenters;
          }

          var src = RECAPTCHA_URL + '?' + stringify(parameters);

          return new Promise(function(resolve, reject) {
            setOnloadCallback(ONLOAD_CALLBACK_NAME, function() {
              if (window.grecaptcha) {
                resolve(window.grecaptcha);
              } else {
                reject(new Error('grecaptcha is not found in window'));
              }
              delete window[ONLOAD_CALLBACK_NAME];
            });

            var script = createScript(src);

            script.addEventListener('error', function(error) {
              reject(error);
            });

            document.head.appendChild(script);
          });
        }

        function setOnloadCallback(name, callback) {
          window[name] = callback;
        }

        function createScript(src) {
          var script = document.createElement('script');
          script.async = true;
          script.src = src;
          script.type = 'text/javascript';

          return script;
        }

        module.exports = load;

        /***/
      },
      /* 1 */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        module.exports = function promisify(grecaptcha) {
          var hashmap = {};

          function render(container, parameters, inherit) {
            var callback = function(token) {
              if (hashmap[id]) {
                hashmap[id](token);
                hashmap[id] = null;
              }
              if (parameters.callback) {
                parameters.callback(token);
              }
            };

            parameters = Object.assign({}, parameters, { callback: callback });

            var id = grecaptcha.render(container, parameters, inherit);

            hashmap[id] = null;

            container.addEventListener(
              'click',
              function(event) {
                return false;
              },
              true
            );

            return id;
          }

          function execute(id) {
            if (hashmap[id]) {
              return Promise.reject(
                new Error('The request is already pending')
              );
            }

            var promise = new Promise(function(resolve, reject) {
              hashmap[id] = resolve;
            });

            grecaptcha.execute(id);

            return promise;
          }

          function reset(id) {
            grecaptcha.reset(id);
          }

          return {
            render: render,
            execute: execute,
            reset: reset
          };
        };

        /***/
      },
      /* 2 */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        var load = __webpack_require__(0);
        var promisify = __webpack_require__(1);

        var promisifiedMemoized = null;

        module.exports = {
          load: function(parameters) {
            if (promisifiedMemoized) {
              return Promise.resolve(promisifiedMemoized);
            }
            return load(parameters).then(promisify).then(function(promisified) {
              promisifiedMemoized = promisified;
            });
          },
          promisify: promisify
        };

        /***/
      }
      /******/
    ]
  );
});
